"""
Created on July 12,2017
@author: Prajit Kumar Das

Usage: python runMalwareClassifier.py\n
"""
import os
import json
import sys
import time
import datetime
from random import sample
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
from sklearn.metrics import precision_recall_fscore_support, classification_report
from sklearn.multiclass import OneVsRestClassifier
from sklearn.dummy import DummyClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import TruncatedSVD
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, roc_curve, auc
from scipy import stats
import numpy as np
import pandas as pd
import databaseHandler as db
import logging
logging.basicConfig(filename="classification.log",level=logging.DEBUG)

benign=0
malware=1

def getBenignAppPermissionsFromDataJson(appDict):
	bigDict = {}
	permissionsList = []
	appList = sample(appDict.keys(), 10000)
	for pkgName in appList:
		permissions = appDict[pkgName]

		extractedDict = {}
		extractedDict["benignMal"] = benign
		extractedDict["platformVer"] = ""
		extractedDict["pkgName"] = pkgName
		extractedDict["features"] = []
		extractedDict["permissions"] = permissions

		for permission in permissions:
			permissionsList.append(permission)

		bigDict[pkgName] = extractedDict

	return list(set(permissionsList)), bigDict

def getMalwareAppPermissionsFromDataJson(appDict):
	bigDict = {}
	permissionsList = []
	appList = sample(appDict.keys(), 10000)
	for app in appList:
		extractedDict = {}
		pkgName = appDict[app]["pkgName"]

		if appDict[app]["benignMal"] == "benign":
			extractedDict["benignMal"] = benign
		else:
			extractedDict["benignMal"] = malware

		extractedDict["platformVer"] = appDict[app]["platformVer"]
		extractedDict["pkgName"] = pkgName
		extractedDict["features"] = appDict[app]["features"]
		extractedDict["permissions"] = appDict[app]["permissions"]

		for permission in appDict[app]["permissions"]:
			permissionsList.append(permission)

		bigDict[pkgName] = extractedDict

	return list(set(permissionsList)), bigDict

def runClassification():
	allAppsDict = {}
	permissionsList = []

	malwareDict = json.loads(open("malware.json","r").read())
	benignADict = json.loads(open("data.json","r").read())
	featImpDict = json.loads(open("featImp.json","r").read())

	permissionsList1, extractedDict1 = getMalwareAppPermissionsFromDataJson(malwareDict)
	permissionsList2, extractedDict2 = getBenignAppPermissionsFromDataJson(benignADict)

	permissionsList = list(set(permissionsList1 + permissionsList2))

	allAppsDict = extractedDict1
	allAppsDict.update(extractedDict2)

	X = []
	y = []

	PermDict = {}
	for permission in permissionsList:
		if permission in featImpDict:
			if permission not in PermDict:
				PermDict[permission] = {}
				PermDict[permission]["benign"] = 0
				PermDict[permission]["malware"] = 0

	appFeatWtDict = {}

	for app in allAppsDict:
		classificationFeatures = []

		appFeatWt = 0.0
			
		for permission in permissionsList:
			if permission in featImpDict:
				if permission in allAppsDict[app]["permissions"]:
					appFeatWt += float(featImpDict[permission])
					classificationFeatures.append(1)
					if allAppsDict[app]["benignMal"] == benign:
						PermDict[permission]["benign"] += 1
					else:
						PermDict[permission]["malware"] += 1
				else:
					classificationFeatures.append(0)
			
		X.append(classificationFeatures)
		y.append(allAppsDict[app]["benignMal"])

		appFDict = {}
		appFDict["benignMal"] = allAppsDict[app]["benignMal"]
		appFDict["featWt"] = appFeatWt
		appFeatWtDict[app] = {}
		appFeatWtDict[app]["data"] = appFDict

	import unicodedata

	# print PermDict
	with open("resultFeatImp.csv", "wb") as file:
		for app in appFeatWtDict:
			line = unicodedata.normalize('NFKD', app).encode('ascii','ignore')+","+str(appFeatWtDict[app]["data"]["benignMal"])+","+str(appFeatWtDict[app]["data"]["featWt"])
			file.write(line)
			file.write('\n')

	return np.array(X),np.array(y)
	
def main(argv):
	startTime = time.time()
	X,y = runClassification()

	executionTime = str((time.time()-startTime)/60)
	print "Execution time was: "+executionTime+" minutes"

if __name__ == "__main__":
	main(sys.argv)