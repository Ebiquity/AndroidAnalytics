"""
Created on July 12,2017
@author: Prajit Kumar Das

Usage: python runMalwareClassifier.py\n
"""
import os
import json
import sys
import time
import datetime
from random import sample
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
from sklearn.metrics import precision_recall_fscore_support, classification_report
from sklearn.multiclass import OneVsRestClassifier
from sklearn.dummy import DummyClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import TruncatedSVD
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, roc_curve, auc
import matplotlib.pyplot as plt
from scipy import stats
import numpy as np
import pandas as pd
import databaseHandler as db
import logging
logging.basicConfig(filename="classification.log",level=logging.DEBUG)

benign=0
malware=1
testRatio=0.25

names = ["Nearest Neighbors",
		 "Neural Net"]

classifiers = [DummyClassifier(strategy="most_frequent"),
				SVC(kernel="linear", C=1)]
# classifiers = [KNeighborsClassifier(3),
# 				MLPClassifier(hidden_layer_sizes=(100,), max_iter=10, alpha=1e-4, solver='sgd', verbose=10, tol=1e-4, random_state=1, learning_rate_init=1e-1)]

def doClassify(X,y):
	a = []
	b = []
	for iteration in range(0,2):
		skf = StratifiedKFold(n_splits=10)
		for train_index, test_index in skf.split(X, y):
			X_train, X_test = X[train_index], X[test_index]
			y_train, y_test = y[train_index], y[test_index]
			# X_train, X_test, y_train, y_test = \
			# 	train_test_split(X, y, stratify=y, test_size=testRatio, random_state=42)
			# iterate over classifiers
			for name, clf in zip(names, classifiers):
				print "Running cliasifer:", name
				clf.fit(X_train, y_train) # Train the model
				y_pred=clf.predict(X_test) # Do the predcition on test set
				tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()
				if name == "Neural Net":
					a.append(fp+fn)
				else:
					b.append(fp+fn)

	tstat, pvalue = stats.ttest_rel(a,b)
	print a, b, tstat, pvalue

def getBenignAppPermissionsFromDataJson(appDict):
	bigDict = {}
	permissionsList = []
	appList = sample(appDict.keys(), 10000)
	for pkgName in appList:
		permissions = appDict[pkgName]

		extractedDict = {}
		extractedDict["benignMal"] = benign
		extractedDict["platformVer"] = ""
		extractedDict["pkgName"] = pkgName
		extractedDict["features"] = []
		extractedDict["permissions"] = permissions

		for permission in permissions:
			permissionsList.append(permission)

		bigDict[pkgName] = extractedDict

	return list(set(permissionsList)), bigDict

def getMalwareAppPermissionsFromDataJson(appDict):
	bigDict = {}
	permissionsList = []
	for app in appDict:
		extractedDict = {}
		pkgName = appDict[app]["pkgName"]

		if appDict[app]["benignMal"] == "benign":
			extractedDict["benignMal"] = benign
		else:
			extractedDict["benignMal"] = malware

		extractedDict["platformVer"] = appDict[app]["platformVer"]
		extractedDict["pkgName"] = pkgName
		extractedDict["features"] = appDict[app]["features"]
		extractedDict["permissions"] = appDict[app]["permissions"]

		for permission in appDict[app]["permissions"]:
			permissionsList.append(permission)

		bigDict[pkgName] = extractedDict

	return list(set(permissionsList)), bigDict

def runClassification():
	allAppsDict = {}
	permissionsList = []

	malwareDict = json.loads(open("malware.json","r").read())
	benignADict = json.loads(open("data.json","r").read())

	permissionsList1, extractedDict1 = getMalwareAppPermissionsFromDataJson(malwareDict)
	permissionsList2, extractedDict2 = getBenignAppPermissionsFromDataJson(benignADict)

	permissionsList = list(set(permissionsList1 + permissionsList2))

	allAppsDict = extractedDict1
	allAppsDict.update(extractedDict2)

	X = []
	y = []

	malwarePermDict = {}
	benignAppPermDict = {}

	for app in allAppsDict:
		classificationFeatures = []

		for permission in permissionsList:
			if permission in allAppsDict[app]["permissions"]:
				classificationFeatures.append(1)
			else:
				classificationFeatures.append(0)
			if allAppsDict[app]["benignMal"] == benign:
				if permission in benignAppPermDict:
					benignAppPermDict[permission] += 1
				else:
					benignAppPermDict[permission] = 1
			else:
				if permission in malwarePermDict:
					malwarePermDict[permission] += 1
				else:
					malwarePermDict[permission] = 1

		X.append(classificationFeatures)
		y.append(allAppsDict[app]["benignMal"])

	return X,y
	
def main(argv):
	startTime = time.time()
	X,y = runClassification()
	doClassify(X,y)
	executionTime = str((time.time()-startTime)/60)
	print "Execution time was: "+executionTime+" minutes"

if __name__ == "__main__":
	main(sys.argv)